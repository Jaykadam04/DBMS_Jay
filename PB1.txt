// Insert documents into the Student collection
db.Student.insertMany([
  { Roll_No: "A01", Name: "Jay", Class: "FE", Marks: 88, Address: "ADDRESS1", Enrolled_Courses: ["DBMS", "TOC"] },
  { Roll_No: "A02", Name: "Bhavesh", Class: "SE", Marks: 75, Address: "ADDRESS2", Enrolled_Courses: ["Math", "TOC"] },
  { Roll_No: "A03", Name: "Harshal", Class: "TE", Marks: 82, Address: "ADDRESS3", Enrolled_Courses: ["DBMS", "Math"] },
  { Roll_No: "A04", Name: "Gaurav", Class: "BE", Marks: 45, Address: "ADDRESS4", Enrolled_Courses: ["Physics", "DBMS"] },
  { Roll_No: "A05", Name: "Om", Class: "TE", Marks: 52, Address: "ADDRESS5", Enrolled_Courses: ["DBMS", "TOC"] },
  { Roll_No: "A06", Name: "Kunal", Class: "FE", Marks: 38, Address: "ADDRESS6", Enrolled_Courses: ["Chemistry"] },
  { Roll_No: "A07", Name: "Kadam", Class: "SE", Marks: 96, Address: "ADDRESS7", Enrolled_Courses: ["Math", "DBMS", "TOC"] },
  { Roll_No: "A08", Name: "Karan", Class: "TE", Marks: 71, Address: "ADDRESS8", Enrolled_Courses: ["Math", "DBMS"] },
  { Roll_No: "A09", Name: "Kartika", Class: "BE", Marks: 18, Address: "ADDRESS9", Enrolled_Courses: ["Physics"] },
  { Roll_No: "A10", Name: "Soham", Class: "FE", Marks: 27, Address: "ADDRESS10", Enrolled_Courses: ["Chemistry", "Math"] }
]);

// 1. List the names of students who have enrolled in the course “DBMS” or “TOC”
db.Student.find({ Enrolled_Courses: { $in: ["DBMS", "TOC"] } }, { Name: 1, _id: 0 });

// 2. List the Roll numbers and class of students who have marks more than 50 or class as TE
db.Student.find({ $or: [{ Marks: { $gt: 50 } }, { Class: "TE" }] }, { Roll_No: 1, Class: 1, _id: 0 });

// 3. Update the entire record of roll_no A10
db.Student.updateOne(
  { Roll_No: "A10" },
  {
    $set: {
      Name: "Soham Updated",
      Class: "FE",
      Marks: 30,
      Address: "New Address10",
      Enrolled_Courses: ["Physics", "Math"]
    }
  }
);

// 4. Display the names of students having 3rd and 4th highest marks
db.Student.find({}, { Name: 1, Marks: 1, _id: 0 })
  .sort({ Marks: -1 })
  .skip(2)
  .limit(2);

// 5. Delete the records of students having marks less than 20
db.Student.deleteMany({ Marks: { $lt: 20 } });

// 6. Delete only the first record from the collection
db.Student.deleteOne({});
